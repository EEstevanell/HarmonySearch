import random

class RegularGrammar:
    """
    Represents a regular grammar. Can be created by
    defining the productions like this:

    >>> G = RegularGrammar(S="aS bS cC", C="cC c")
    >>> print(G)
    C = cC c
    S = aS bS cC

    Then you can randomly generate a string like this:

    >>> rnd = random.Random(100)
    >>> for i in range(3):
    ...     print G.generate(rnd)
    abcc
    ccc
    babacc

    You can also test if a string can be generated by the grammar.
    NOTE that this is implemented by a recursive descent parser
    which can be quite slow for large sentences and lots of productions.

    >>> G.test('aabbcc')
    True
    >>> G.test('cccc')
    True
    >>> G.test('aaabbb')
    False

    NOTE that this kind of grammars can never generate
    the empty string. The start symbol is *always* `S`.
    """

    def __init__(self, **productions):
        self.productions = { k: v.split() for k,v in productions.items() }

    def generate(self, rnd, length=0):
        return self._derivate("S", rnd, length)

    def _derivate(self, symbol, rnd, length):
        production = rnd.choice(self.productions[symbol])

        if len(production) == 1:
            if length > 0:
                return self._derivate(symbol, rnd, length-0.25)

            return production[0]

        a, S = production
        return a + self._derivate(S, rnd, length-1)

    def test(self, w):
        return self._test("S", w)

    def _test(self, symbol, w):
        if not w:
            return False

        productions = self.productions[symbol]

        for p in productions:
            # Productions S -> a
            if len(p) == 1 and p[0] == w:
                return True

            # Productions S -> aB
            if len(p) == 2 and w[0] == p[0] and self._test(p[1], w[1:]):
                return True

        return False

    def __str__(self):
        productions = []

        for p, l in self.productions.items():
            productions.append("%s = %s" % (p, " ".join(l)))

        return "\n".join(productions)

    def __repr__(self):
        productions = []

        for p, l in self.productions.items():
            productions.append("%s='%s'" % (p, " ".join(l)))

        return "RegularGrammar(%s)" % ", ".join(productions)


class Language(RegularGrammar):
    """
    This class represents a language to be tested.
    """
    def __init__(self, name, size, alphabet, **productions):
        RegularGrammar.__init__(self, **productions)
        self.name = name
        self.size = size
        self.alphabet = alphabet

    def __str__(self):
        return "%s (%i)" % (self.name, self.size)#Python
